{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}

module Upcast.Outputs where

import qualified Algorithms.NaturalSort as N
import Data.Function (on)
import Data.List (intercalate, sortBy)
import Data.Monoid ((<>), mconcat, mempty)

import Upcast.Shell (toString)
import Upcast.Types (Machine(..))

machines2ssh [] = ""
machines2ssh xs = machines2ssh' xs

machines2ssh' :: [Machine] -> String
machines2ssh' = (prefix <>) . intercalate "\n" . fmap config . sortBy (N.compare `on` m_hostname)
  where
    prefix = unlines [ "#"
                     , "# This file is automatically generated using `upcast infra'."
                     , "#"
                     , "UserKnownHostsFile=/dev/null"
                     , "StrictHostKeyChecking=no"
                     , ""
                     ]

    args :: Show a => (String, a) -> String
    args (k, v) = k <> " " <> toString v

    config Machine{..} = unlines [ args ("Host", m_hostname)
                                 , args ("  #", m_instanceId)
                                 , args ("  HostName", m_publicIp)
                                 , "  User root"
                                 , "  ControlMaster auto"
                                 , "  ControlPath ~/.ssh/master-%r@%h:%p"
                                 , "  ForwardAgent yes"
                                 , "  ControlPersist 60s"
                                 ] <> maybe mempty
                                      (args . ("  IdentityFile",)) m_keyFile

machines2nix :: [Machine] -> String
machines2nix = (<> suffix) . (prefix <>) . intercalate "\n" . fmap machine2nix . sortBy (N.compare `on` m_hostname)
  where
    prefix = unlines [ "#"
                     , "# This file is automatically generated using `upcast infra-nix'."
                     , "#"
                     , "{"
                     , "  instances = {"
                     ]
    suffix = "  };\n}\n"

    machine2nix Machine{..} = unlines $ fmap ("    " ++)
      [ mconcat [ toString m_hostname, " = {" ]
      , mconcat ["  instance-id = ", show m_instanceId, ";"]
      , mconcat ["  public-ip = ", show m_publicIp, ";"]
      , mconcat ["  private-ip = ", show m_privateIp, ";"]
      , mconcat ["  key-file = ", maybe "null" show m_keyFile, ";"]
      , "};"
      ]
